@using Client_App.DTOs.Products.Responses
@using Client_App.Components.Share.ReusableComponents

<div class="w-6/12 ml-10 pr-5">
    @if (ProductById.SoldQuantity > 100)
    {
        <div class="text-main bg-[#FADC6F] h-6 rounded-md max-w-[150px] flex items-center p-5 font-semibold uppercase mb-5">
            <p>Best Seller</p>
        </div>
    }
    <div class="mb-5">
        <div class="text-6xl text-main font-heading_bold ">@ProductById.Name</div>
        <div class="my-2 text-gray-500">
            <span>@ProductById.Description</span>
        </div>
    </div>

    <div class="flex">
        <div class="flex items-center">
            <Rating TotalRating="ProductById.TotalRating"/>
            <p class="ms-1 font-medium text-gray-500 dark:text-gray-400">@ProductById.TotalRating</p>
        </div>
        <div class="ml-3">
            <p class="font-light text-emerald-600 text-xl">@ProductById.SoldQuantity Sold</p>
        </div>
    </div>

    <div class="flex items-center my-5 w-full">
        <div class="text-2xl font-bold text-main ">
            $@CalculateDiscountPrice(ProductById, Price)
        </div>
        <div class="text-gray-500 line-through mx-3">$@Price.ToString("F2")</div>
        <div class=" whitespace-nowrap bg-red-100 text-red-600 px-2 py-1 rounded ">
            SAVE @(ProductById.DiscountPercent)%
        </div>
    </div>
    <div class="w-full pt-2">
        <div class="mb-2">
            <p class="font-semibold font-heading text-xl text-gray-600">Size</p>
        </div>
        <select name="variants" class="outline-none hover:border-[#FADC6F] w-full border-[#00205c] border-2 border-solid py-3 px-8 rounded-sm text-main" @bind="Price">
            @foreach (var variant in ProductById.ProductVariants)
            {
                <option value="@variant.OriginalPrice.Value">@variant.VariantName</option>
            }
        </select>
    </div>
    <div class="flex gap-x-10 my-8">
        <div class="flex items-center">
            <div class="flex items-center border border-black justify-between max-w-[120px] px-0.5 rounded-md hover:border-[#fadc6f]">
                <button type="button"
                        @onclick="() => AdjustQuantity('-')"
                        class="size-10 leading-10 text-gray-600 transition hover:opacity-75">
                    &minus;
                </button>
                <input
                    id="quantityInput"
                    type="number"
                    @bind="Quantity"
                    min="1"
                    max="20"
                    class=" h-12 w-16 border-transparent text-center [-moz-appearance:_textfield] sm:text-sm [&::-webkit-inner-spin-button]:m-0 [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:m-0 [&::-webkit-outer-spin-button]:appearance-none "/>
                <button type="button"
                        @onclick="() => AdjustQuantity('+')"
                        class="size-10 leading-10 text-gray-600 transition hover:opacity-75">
                    &plus;
                </button>
            </div>

        </div>
        <div class="flex w-full items-center">
            <div class="w-full">
                <button type="submit"
                        class="h-[54px] w-full flex justify-center items-center bg-[#00205c] hover:border-[#00205c] hover:border-2 hover:bg-[#FADC6F] group transition-all duration-200 rounded-md">
                    <p class="text-white group-hover:text-main">
                        Add To Cart
                    </p>
                </button>
            </div>
        </div>
    </div>
    <div class="w-full py-2 border-t-2 border-[#ccccc]">
        <div class="py-1">
            <div class="flex w-full px-2">
                <div class="flex justify-between items-center w-full cursor-pointer" @onclick="() => ToggleSection(nameof(ProductById.Description))">
                    <div class="font-medium text-xl text-gray-600 flex">
                        <span class="pr-2">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="rgba(75,85,99,1)">
                                <path d="M5.99805 3C9.48787 3 12.3812 5.55379 12.9112 8.8945C14.0863 7.72389 15.7076 7 17.498 7H21.998V9.5C21.998 13.0899 19.0879 16 15.498 16H12.998V21H10.998V13H8.99805C5.13205 13 1.99805 9.86599 1.99805 6V3H5.99805ZM19.998 9H17.498C15.0128 9 12.998 11.0147 12.998 13.5V14H15.498C17.9833 14 19.998 11.9853 19.998 9.5V9ZM5.99805 5H3.99805V6C3.99805 8.76142 6.23662 11 8.99805 11H10.998V10C10.998 7.23858 8.75947 5 5.99805 5Z"></path>
                            </svg>
                        </span>
                        <p>Description</p>
                    </div>
                    <div class="rotate-@(_isVisible[nameof(ProductById.Description)] ? "180" : "0") transition-transform duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="rgba(75,85,99,1)">
                            <path d="M11.9999 10.8284L7.0502 15.7782L5.63599 14.364L11.9999 8L18.3639 14.364L16.9497 15.7782L11.9999 10.8284Z"></path>
                        </svg>
                    </div>
                </div>
            </div>
            <div class="px-2 font-medium transition-all duration-300 ease-in-out 
                    max-h-0 overflow-hidden 
                    @(_isVisible[nameof(ProductById.Description)] ? "max-h-screen opacity-100 mt-2" : "opacity-0")">
                <p>@ProductById.Description</p>
            </div>
        </div>
    </div>
    <div class="w-full py-2 border-y-2 border-[#ccccc]">
        <div class="py-1">
            <div class=" flex w-full px-2">
                <div class="flex justify-between items-center w-full cursor-pointer" @onclick="() => ToggleSection(nameof(ProductById.ProductUseGuide))">
                    <div class="font-medium text-xl text-gray-600 flex">
                        <span class="pr-2">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="rgba(75,85,99,1)">
                                <path d="M5.99805 3C9.48787 3 12.3812 5.55379 12.9112 8.8945C14.0863 7.72389 15.7076 7 17.498 7H21.998V9.5C21.998 13.0899 19.0879 16 15.498 16H12.998V21H10.998V13H8.99805C5.13205 13 1.99805 9.86599 1.99805 6V3H5.99805ZM19.998 9H17.498C15.0128 9 12.998 11.0147 12.998 13.5V14H15.498C17.9833 14 19.998 11.9853 19.998 9.5V9ZM5.99805 5H3.99805V6C3.99805 8.76142 6.23662 11 8.99805 11H10.998V10C10.998 7.23858 8.75947 5 5.99805 5Z"></path>
                            </svg>
                        </span>
                        <p>Product Use Guide</p>
                    </div>
                    <div class="rotate-@(_isVisible[nameof(ProductById.ProductUseGuide)] ? "180" : "0") transition-transform duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="rgba(75,85,99,1)">
                            <path d="M11.9999 10.8284L7.0502 15.7782L5.63599 14.364L11.9999 8L18.3639 14.364L16.9497 15.7782L11.9999 10.8284Z"></path>
                        </svg>
                    </div>
                </div>
            </div>
            <div class="px-2 font-medium transition-all duration-300 ease-in-out 
                    max-h-0 overflow-hidden @(_isVisible[nameof(ProductById.ProductUseGuide)] ? "max-h-screen opacity-100 mt-2 " : "opacity-0")">
                <p>@ProductById.ProductUseGuide</p>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public ProductById ProductById { get; set; } = null!;
    private decimal Price { get; set; }
    private int Quantity { get; set; } = 1;

    private readonly Dictionary<string, bool> _isVisible =
        new()
        {
            { nameof(ProductById.Description), false },
            { nameof(ProductById.ProductUseGuide), false }
        };


    protected override Task OnParametersSetAsync()
    {
        Price = ProductById.ProductVariants[0].OriginalPrice.Value;
        return Task.CompletedTask;
    }

    private string CalculateDiscountPrice(ProductById productById, decimal price)
    {
        return (price * productById.DiscountPercent / 100).ToString("F2");
    }

    private void AdjustQuantity(char behavior)
    {
        Quantity = behavior switch
        {
            '+' => Math.Min(Quantity + 1, 20), // Increment up to max 20
            '-' => Math.Max(Quantity - 1, 1), // Decrement down to min 1
            _ => Quantity // Fallback case
        };
    }

    private void ToggleSection(string section)
    {
        if (_isVisible.ContainsKey(section))
        {
            _isVisible[section] = !_isVisible[section];
        }
    }

}