
<nav aria-label="Page navigation example">
    <ul class="inline-flex -space-x-px text-base h-10">
        <li>
            <button class="flex items-center justify-center px-4 h-10 ms-0 leading-tight text-gray-500 bg-white border border-e-0 border-gray-300 rounded-s-lg hover:bg-gray-100 hover:text-gray-700"
                    disabled="@(CurrentPage == 1)"
                    @onclick="() => OnPageClick.InvokeAsync(1)">
                Previous
            </button>
        </li>

        @foreach (var page in PaginationList)
        {
            <li>
                @{
                    var currentPage = page;
                }
                <button class="flex items-center justify-center px-4 h-10 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 " style=" @(currentPage == CurrentPage ? "background-color: #00205c;color: white" : ""); "
                        @onclick="() => OnPageClick.InvokeAsync(currentPage)" disabled="@(currentPage == -1)">
                    @(page == -1 ? "..." : currentPage)
                </button>
            </li>
        }

        <li>
            <button class="flex items-center justify-center px-4 h-10 leading-tight text-gray-500 bg-white border border-gray-300 rounded-e-lg hover:bg-gray-100 hover:text-gray-700"
                    disabled="@(CurrentPage == TotalPages )"
                    @onclick="() => OnPageClick.InvokeAsync(TotalPages)">
                Next
            </button>
        </li>
    </ul>
</nav>

@code {
    [Parameter] public int TotalPages { get; set; }
    [Parameter] public int CurrentPage { get; set; }
    [Parameter] public EventCallback<int> OnPageClick { get; set; }
    private List<int> PaginationList { get; set; } = null!;

    protected override void OnParametersSet()
    {
        PaginationList = GetPagination(CurrentPage, TotalPages);
    }

    private List<int> GetPagination(int currentPage, int totalPages)
    {
        List<int> pagination = [];

        for (var i = 1; i <= Math.Min(3, totalPages); i++)
        {
            pagination.Add(i);
        }

        if (currentPage > 4)
        {
            pagination.Add(-1); // Use -1 to represent the "..." placeholder
        }

        var start = Math.Max(4, currentPage - 1);
        var end = Math.Min(currentPage + 1, totalPages - 3);

        for (var i = start; i <= end; i++)
        {
            pagination.Add(i);
        }

        if (currentPage < totalPages - 3)
        {
            pagination.Add(-1); // Use -1 for the "..." placeholder
        }

        for (var i = Math.Max(totalPages - 2, 4); i <= totalPages; i++)
        {
            pagination.Add(i);
        }

        return pagination;
    }

}