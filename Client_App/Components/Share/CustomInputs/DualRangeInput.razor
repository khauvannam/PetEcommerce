@using Client_App.DTOs.Products.Requests

<div class="flex justify-center items-center">
    <div class="relative max-w-xl w-full">
        <div>
            <input type="range" @bind:get="LeftValue" step="100" min="@Min" max="@Max" @bind:set="SetLeftValue" @bind:event="oninput"
                   class="absolute pointer-events-none appearance-none z-20 h-2 w-full opacity-0 cursor-pointer">
            <input type="range" @bind:get="RightValue" step="100" min="@Min" max="@Max" @bind:set="SetRightValue" @bind:event="oninput"
                   class="absolute pointer-events-none appearance-none z-20 h-2 w-full opacity-0 cursor-pointer">

            <div class="relative z-10 h-2">
                <div class="absolute z-10 left-0 right-0 bottom-0 top-0 rounded-md bg-gray-200"></div>
                <div class="absolute z-20 top-0 bottom-0 rounded-md bg-[#0043c1]" style="@GetRangePosition()"></div>
                <div class="absolute z-30 w-6 h-6 top-0 bg-[#0043c1] rounded-full -mt-2" style="@GetLeftThumbPosition()"></div>
                <div class="absolute z-30 w-6 h-6 top-0 bg-[#0043c1] rounded-full -mt-2" style="@GetRightThumbPosition()"></div>
            </div>
        </div>

        <div class="flex items-center justify-between pt-5 space-x-4 text-sm text-gray-700">
            <div>
                <input type="text" @bind:get="LeftValue" maxlength="5" @bind:set="SetLeftValue"
                       class="w-24 px-3 py-2 text-center border border-gray-200 rounded-lg bg-gray-50 focus:outline-none">
            </div>
            <div>
                <input type="text" @bind:get="RightValue" maxlength="5" @bind:set="SetRightValue"
                       class="w-24 px-3 py-2 text-center border border-gray-200 rounded-lg bg-gray-50 focus:outline-none">
            </div>
        </div>
    </div>
</div>

@code {
    private decimal Min { get; set; }
    private decimal Max { get; set; }

    [Parameter] public decimal LeftValue { get; set; }
    [Parameter] public decimal RightValue { get; set; } = 10000;

    [Parameter] public EventCallback<decimal> LeftValueChanged { get; set; }
    [Parameter] public EventCallback<decimal> RightValueChanged { get; set; }

    [Parameter] public EventCallback<ProductsSearchFilterRequest> OnPriceChanged { get; set; }

    protected override void OnInitialized()
    {
        Min = LeftValue;
        Max = RightValue;
    }

    private async void SetLeftValue(decimal value)
    {
        LeftValue = Math.Min(value, RightValue - 100);
        await LeftValueChanged.InvokeAsync(LeftValue);
        if (OnPriceChanged.HasDelegate)
        {
            await OnPriceChanged.InvokeAsync();
        }
    }

    private async void SetRightValue(decimal value)
    {
        RightValue = Math.Max(value, LeftValue + 100);
        await RightValueChanged.InvokeAsync(RightValue);
        if (OnPriceChanged.HasDelegate)
        {
            await OnPriceChanged.InvokeAsync();
        }
    }

    private string GetLeftThumbPosition() =>
        $"left: {((LeftValue - Min) / (Max - Min) * 100)}%;";

    private string GetRightThumbPosition() =>
        $"right: {100 - ((RightValue - Min) / (Max - Min) * 100)}%;";

    private string GetRangePosition() =>
        $"left: {((LeftValue - Min) / (Max - Min) * 100)}%; right: {100 - ((RightValue - Min) / (Max - Min) * 100)}%;";

}