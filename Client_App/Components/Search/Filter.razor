@using Client_App.DTOs.Products.Requests
@using Client_App.Components.Share.CustomInputs
<div class="">
    <!-- Filters -->
    <form class="mt-4">

        <div class="px-4 py-6">
            <h3 class="-mx-2 -my-3 flow-root" @onclick="() => ToggleSection(nameof(ProductsSearchFilterRequest.IsDesc))">
                <!-- Expand/collapse section button -->
                <button type="button" class="flex w-full items-center justify-between bg-white px-2 py-3 text-gray-400 hover:text-gray-500" aria-controls="filter-section-mobile-0" aria-expanded="false">
                    <span class="font-medium text-gray-900">Relevance</span>
                    <span class="ml-6 flex items-center">
                        <div class="rotate-@(_sectionVisible[nameof(ProductsSearchFilterRequest.IsDesc)] ? "180" : "0") transition-transform duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor">
                                <path d="M11.9999 10.8284L7.0502 15.7782L5.63599 14.364L11.9999 8L18.3639 14.364L16.9497 15.7782L11.9999 10.8284Z"></path>
                            </svg>
                        </div>
                    </span>
                </button>
            </h3>

            <!-- Filter section, show/hide based on section state. -->
            <div class="max-h-0 overflow-hidden transition-all ease-out 
                    @(_sectionVisible[nameof(ProductsSearchFilterRequest.IsDesc)] ? "max-h-screen opacity-100 mt-2 pt-6 " : "opacity-0")">
                <div class="space-y-6">
                    <div class="flex items-center">
                        <input value="white" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-transparent" @onchange="OnRelevanceChecked" checked="@(!FilterRequest.IsDesc)">
                        <label class="ml-3 min-w-0 flex-1 text-gray-500">Low to high</label>
                    </div>
                    <div class="flex items-center">
                        <input value="beige" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-transparent " @onchange="OnRelevanceChecked" checked="@(FilterRequest.IsDesc)">
                        <label for="filter-mobile-color-1" class="ml-3 min-w-0 flex-1 text-gray-500">High to low</label>
                    </div>
                </div>
            </div>
        </div>

        <div class="border-t border-gray-200 px-4 py-6">
            <h3 class="-mx-2 -my-3 flow-root" @onclick="() => ToggleSection(nameof(ProductsSearchFilterRequest.Available))">
                <!-- Expand/collapse section button -->
                <button type="button" class="flex w-full items-center justify-between bg-white px-2 py-3 text-gray-400 hover:text-gray-500" aria-controls="filter-section-mobile-0" aria-expanded="false">
                    <span class="font-medium text-gray-900">Availability</span>
                    <span class="ml-6 flex items-center">
                        <div class="rotate-@(_sectionVisible[nameof(ProductsSearchFilterRequest.Available)] ? "180" : "0") transition-transform duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor">
                                <path d="M11.9999 10.8284L7.0502 15.7782L5.63599 14.364L11.9999 8L18.3639 14.364L16.9497 15.7782L11.9999 10.8284Z"></path>
                            </svg>
                        </div>
                    </span>
                </button>
            </h3>

            <!-- Filter section, show/hide based on section state. -->
            <div class="max-h-0 overflow-hidden transition-all ease-out 
                    @(_sectionVisible[nameof(ProductsSearchFilterRequest.Available)] ? "max-h-screen opacity-100 mt-2 pt-6 " : "opacity-0")" id="filter-section-mobile-0">
                <div class="space-y-6">
                    <div class="flex items-center">
                        <input value="white" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-transparent focus:ring-offset-transparent" @onchange="OnAvailableChecked" checked="@FilterRequest.Available">
                        <label class="ml-3 min-w-0 flex-1 text-gray-500">In stock</label>
                    </div>
                    <div class="flex items-center">
                        <input id="filter-mobile-color-1" value="beige" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-transparent focus:ring-offset-transparent" @onchange="OnAvailableChecked" checked="@(!FilterRequest.Available)">
                        <label for="filter-mobile-color-1" class="ml-3 min-w-0 flex-1 text-gray-500">Out stock</label>
                    </div>
                </div>
            </div>
        </div>

        <div class="border-t border-gray-200 px-4 py-6">
            <h3 class="-mx-2 -my-3 flow-root" @onclick="() => ToggleSection(nameof(ProductsSearchFilterRequest.FilerBy))">
                <!-- Expand/collapse section button -->
                <button type="button" class="flex w-full items-center justify-between bg-white px-2 py-3 text-gray-400 hover:text-gray-500" aria-controls="filter-section-mobile-1" aria-expanded="false">
                    <span class="font-medium text-gray-900">Filter By</span>
                    <div class="rotate-@(_sectionVisible[nameof(ProductsSearchFilterRequest.FilerBy)] ? "180" : "0") transition-transform duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor">
                            <path d="M11.9999 10.8284L7.0502 15.7782L5.63599 14.364L11.9999 8L18.3639 14.364L16.9497 15.7782L11.9999 10.8284Z"></path>
                        </svg>
                    </div>
                </button>
            </h3>
            <!-- Filter section, show/hide based on section state. -->
            <div class=" max-h-0 overflow-hidden transition-all ease-in 
                    @(_sectionVisible[nameof(ProductsSearchFilterRequest.FilerBy)] ? "max-h-screen opacity-100 mt-2 pt-6" : "opacity-0")" id="filter-section-mobile-1">
                <div class="space-y-6 ">
                    @foreach (var (key, value) in _filterByCheckBox)
                    {
                        <div class="flex items-center">
                            <input @onchange="() => OnFilterCheckBoxHandle(key)" value="@value" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-transparent focus:ring-offset-transparent" checked="@value">
                            <label class="ml-3 min-w-0 flex-1 text-gray-500">@Capitalize(key.Replace('-', ' '))</label>
                        </div>
                    }

                </div>
            </div>
        </div>

        <div class="border-t border-gray-200 px-4 py-6">
            <h3 class="-mx-2 -my-3 flow-root" @onclick="() => ToggleSection(nameof(ProductsSearchFilterRequest.MinPrice))">
                <!-- Expand/collapse section button -->
                <button type="button" class="flex w-full items-center justify-between bg-white px-2 py-3 text-gray-400 hover:text-gray-500" aria-controls="filter-section-mobile-1" aria-expanded="false">
                    <span class="font-medium text-gray-900">Price Range</span>
                    <div class="rotate-@(_sectionVisible[nameof(ProductsSearchFilterRequest.MinPrice)] ? "180" : "0") transition-transform duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor">
                            <path d="M11.9999 10.8284L7.0502 15.7782L5.63599 14.364L11.9999 8L18.3639 14.364L16.9497 15.7782L11.9999 10.8284Z"></path>
                        </svg>
                    </div>
                </button>
            </h3>

            <div class="gap-x-4 grid w-full pt-6 transition-all duration-300 ease-in-out 
                    max-h-0 overflow-hidden 
                    @(_sectionVisible[nameof(ProductsSearchFilterRequest.MinPrice)] ? "max-h-screen opacity-100 mt-2" : "opacity-0")">

                <div class="flex justify-center items-center">
                    <div class="relative max-w-xl w-full">
                        <div>
                            <input type="range" @bind:get="FilterRequest.MinPrice" step="100" min="@Min" max="@Max" @bind:set="SetLeftValue" @bind:event="oninput"
                                   class="absolute pointer-events-none appearance-none z-20 h-2 w-full opacity-0 cursor-pointer">
                            <input type="range" @bind:get="FilterRequest.MaxPrice" step="100" min="@Min" max="@Max" @bind:set="SetRightValue" @bind:event="oninput"
                                   class="absolute pointer-events-none appearance-none z-20 h-2 w-full opacity-0 cursor-pointer">

                            <div class="relative z-10 h-2">
                                <div class="absolute z-10 left-0 right-0 bottom-0 top-0 rounded-md bg-gray-200"></div>
                                <div class="absolute z-20 top-0 bottom-0 rounded-md bg-[#0043c1]" style="@GetRangePosition()"></div>
                                <div class="absolute z-30 w-6 h-6 top-0 bg-[#0043c1] rounded-full -mt-2" style="@GetLeftThumbPosition()"></div>
                                <div class="absolute z-30 w-6 h-6 top-0 bg-[#0043c1] rounded-full -mt-2" style="@GetRightThumbPosition()"></div>
                            </div>
                        </div>

                        <div class="flex items-center justify-between pt-5 space-x-4 text-sm text-gray-700">
                            <div>
                                <input type="text" @bind:get="FilterRequest.MinPrice" maxlength="5" @bind:set="SetLeftValue"
                                       class="w-24 px-3 py-2 text-center border border-gray-200 rounded-lg bg-gray-50 focus:outline-none">
                            </div>
                            <div>
                                <input type="text" @bind:get="FilterRequest.MaxPrice" maxlength="5" @bind:set="SetRightValue"
                                       class="w-24 px-3 py-2 text-center border border-gray-200 rounded-lg bg-gray-50 focus:outline-none">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </form>
</div>

@code {
    private decimal Min { get; set; }
    private decimal Max { get; set; }

    [Parameter] public ProductsSearchFilterRequest FilterRequest { get; set; } = null!;
    [Parameter] public EventCallback<ProductsSearchFilterRequest> FilterRequestChanged { get; set; }


    protected override void OnInitialized()
    {
        Min = FilterRequest.MinPrice;
        Max = FilterRequest.MaxPrice;
    }


    private void SetLeftValue(decimal value)
    {
        FilterRequest.MinPrice = Math.Min(value, FilterRequest.MaxPrice - 100);
        FilterRequestChanged.InvokeAsync(FilterRequest);
    }

    private void SetRightValue(decimal value)
    {
        FilterRequest.MaxPrice = Math.Max(value, FilterRequest.MinPrice + 100);

        FilterRequestChanged.InvokeAsync(FilterRequest);
    }

    private string GetLeftThumbPosition() =>
        $"left: {((FilterRequest.MinPrice - Min) / (Max - Min) * 100)}%;";

    private string GetRightThumbPosition() =>
        $"right: {100 - ((FilterRequest.MaxPrice - Min) / (Max - Min) * 100)}%;";

    private string GetRangePosition() =>
        $"left: {((FilterRequest.MinPrice - Min) / (Max - Min) * 100)}%; right: {100 - ((FilterRequest.MaxPrice - Min) / (Max - Min) * 100)}%;";

    private readonly Dictionary<string, bool> _filterByCheckBox = new()
    {
        { "best-seller", false }, { "new-arrivals", false }, { "high-rating", false }
    };

    private readonly Dictionary<string, bool> _sectionVisible = new()
    {
        { nameof(ProductsSearchFilterRequest.IsDesc), false }, { nameof(ProductsSearchFilterRequest.FilerBy), true }, { nameof(ProductsSearchFilterRequest.Available), false }, { nameof(ProductsSearchFilterRequest.MinPrice), false }
    };

    private void ToggleSection(string section)
    {
        _sectionVisible[section] = !_sectionVisible[section];
    }

    private void OnFilterCheckBoxHandle(string checkBox)
    {
        var currentCheckState = _filterByCheckBox[checkBox];

        foreach (var key in _filterByCheckBox.Keys)
        {
            _filterByCheckBox[key] = false;
        }

        _filterByCheckBox[checkBox] = !currentCheckState;

        FilterRequest.FilerBy = _filterByCheckBox[checkBox] ? checkBox : default;

        FilterRequestChanged.InvokeAsync(FilterRequest);
    }

    private void OnAvailableChecked()
    {
        FilterRequest.Available = !FilterRequest.Available;

        FilterRequestChanged.InvokeAsync(FilterRequest);
    }

    private void OnRelevanceChecked()
    {
        FilterRequest.IsDesc = !FilterRequest.IsDesc;

        FilterRequestChanged.InvokeAsync(FilterRequest);
    }

    private string Capitalize(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;

        var words = input.Split(' ');

        for (var i = 0; i < words.Length; i++)
        {
            if (words[i].Length > 0)
            {
                words[i] = char.ToUpper(words[i][0]) + words[i][1..].ToLower();
            }
        }

        return string.Join(" ", words);
    }

    private void BindingTwoWays()
    {
        FilterRequestChanged.InvokeAsync(FilterRequest);
    }

}