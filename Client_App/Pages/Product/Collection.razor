@page "/products/{CategoryEndpoint?}"

@using Client_App.Interfaces
@using Client_App.Components.Collections
@using Client_App.Components.Share.ReusableComponents
@using Client_App.DTOs.Categories.Responses
@using Client_App.DTOs.Products.Responses
@using Client_App.DTOs.Share
@using Client_App.Services.Share

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject ErrorService ErrorService
@inject TitleService TitleService


@if (Category is not null)
{
    <Breadcump Name="@Category.CategoryName" Endpoint="@($"/products/{Category.Endpoint}")"/>
    <Introduce Category="Category"/>
}
else
{
    <Loading/>
}

@if (CategoriesPagination is not null)
{
    <ListCategories Categories="CategoriesPagination"/>
}
else
{
    <Loading/>
}
<div class="flex justify-center w-full pt-12 text-main pb-5 px-5">
    <div class="w-full max-w-[1300px]">
        @if (ProductsPagination is not null)
        {
            <div id="list-products">
                <ListProducts Products="ProductsPagination.Data"/>
            </div>

            <div class="my-10 w-full justify-center flex">
                <Pagination TotalPages="TotalPages" OnPageClick="OnPageClick"/>
            </div>
        }
        else
        {
            <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-x-8 gap-y-16">
                @for (var i = 0; i < 4; i++)
                {
                    <div role="status" class="max-w-sm p-4 rounded animate-pulse md:p-6 min-w-[200px]">
                        <div class="flex items-center justify-center h-48 mb-4 bg-gray-300 rounded dark:bg-gray-700">
                            <svg class="w-10 h-10 text-gray-200 dark:text-gray-600" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
                                <path d="M14.066 0H7v5a2 2 0 0 1-2 2H0v11a1.97 1.97 0 0 0 1.934 2h12.132A1.97 1.97 0 0 0 16 18V2a1.97 1.97 0 0 0-1.934-2ZM10.5 6a1.5 1.5 0 1 1 0 2.999A1.5 1.5 0 0 1 10.5 6Zm2.221 10.515a1 1 0 0 1-.858.485h-8a1 1 0 0 1-.9-1.43L5.6 10.039a.978.978 0 0 1 .936-.57 1 1 0 0 1 .9.632l1.181 2.981.541-1a.945.945 0 0 1 .883-.522 1 1 0 0 1 .879.529l1.832 3.438a1 1 0 0 1-.031.988Z"/>
                                <path d="M5 5V.13a2.96 2.96 0 0 0-1.293.749L.879 3.707A2.98 2.98 0 0 0 .13 5H5Z"/>
                            </svg>
                        </div>
                        <div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-48 mb-4"></div>
                        <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div>
                        <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div>
                        <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div>
                        <span class="sr-only">Loading...</span>
                    </div>
                }
            </div>
        }
    </div>
</div>


@code {
    [Parameter] public string? CategoryEndpoint { get; set; } = string.Empty;

    private Category? Category { get; set; }
    public Pagination<ProductsInList>? ProductsPagination { get; set; }
    public Pagination<Category>? CategoriesPagination { get; set; }

    private static int Limit => 10;
    private int TotalPages { get; set; }

    [Inject] public required IProductService ProductService { get; set; }
    [Inject] public required ICategoryService CategoryService { get; set; }

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(CategoryEndpoint))
        {
            NavigationManager.NavigateTo("/products/all", true); // Force reload
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadDataAsync();
        TotalPages = (int)Math.Ceiling((double)ProductsPagination!.TotalItems / Limit);
    }

    private async Task LoadDataAsync()
    {
        var categoryResult = await CategoryService.GetByEndpointAsync<Category>(CategoryEndpoint!);

        if (categoryResult.IsFailure)
        {
            ErrorService.SetErrorMessage(categoryResult.ErrorTypes).NavigateTo();
            await TitleService.SetTitleErrorAsync();
            return;
        }

        Category = categoryResult.Value;

        await TitleService.SetTitleAsync(Category.CategoryName!);

        var categoryPaginationResult = await CategoryService.GetAllAsync<Category>();

        if (categoryPaginationResult.IsFailure)
        {
            ErrorService.SetErrorMessage(categoryPaginationResult.ErrorTypes);
            return;
        }

        CategoriesPagination = categoryPaginationResult.Value;

        await FetchProductAsync(default);

        StateHasChanged();
    }

    private async Task FetchProductAsync(int offset)
    {
        var result = CategoryEndpoint switch
        {
            "all" => await ProductService.GetProductsByConditionAsync<ProductsInList>(offset * Limit, default, false, Limit),
            "best-sellers" => await ProductService.GetProductsByConditionAsync<ProductsInList>(offset * Limit, default, true, Limit),
            _ => await ProductService.GetProductsByConditionAsync<ProductsInList>(offset * Limit, Category!.CategoryId, false, Limit)
        };
        
        if (result.IsFailure)
        {
            ErrorService.SetErrorMessage(result.ErrorTypes).NavigateTo();
            return;
        }

        ProductsPagination = result.Value;
    }

    private async Task OnPageClick(int newPage)
    {
        await FetchProductAsync(newPage - 1);

        await JsRuntime.InvokeVoidAsync("scrollToTop"); // Scroll to the top of the product list
    }

}