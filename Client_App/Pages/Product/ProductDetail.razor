@page "/product/{ProductId:guid}"

@using Client_App.Domains.Products.Responses
@using Client_App.Interfaces
@using Client_App.Components.Share
@using Client_App.Components.ProductDetail
@using Client_App.Domains.Comments.Responses
@using Client_App.Domains.Share


@if (ProductById is not null)
{
    <Breadcump Name="@ProductById.Name" Endpoint="@($"/product/{ProductById.ProductId}")"/>
    <ProductSection ProductById="ProductById"/>

    <div class="mt-20">
        <Overview ProductName="@ProductById.Name"/>
    </div>
}
else
{
    <Loading/>
}

@if (Pagination is not null)
{
    <div class="mt-10">
        <Discussion TotalItems="Pagination.TotalItems" Comments="Comments"/>
    </div>
}

@code {
    [Parameter] public Guid ProductId { get; set; }

    [Inject] public required IProductService ProductService { get; set; }
    [Inject] public required ICommentService CommentService { get; set; }

    private ProductById? ProductById { get; set; }
    private List<Comment> Comments { get; } = [];
    private Pagination<Comment>? Pagination { get; set; }
    private static int Limit => 8;
    private int Offset { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Offset = 0;
        ProductById = await ProductService.GetByIdAsync<ProductById>(ProductId);
        Pagination = await CommentService.GetAllByProductIdAsync<Comment>(Limit, Offset * Limit, ProductId);
        Comments.AddRange(Pagination.Data);
    }


}