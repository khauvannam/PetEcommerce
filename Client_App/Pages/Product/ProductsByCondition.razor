@page "/products/{CategoryEndpoint?}"

@using BasedDomain
@using Client_App.Domains.Categories.Responses
@using Client_App.Domains.Products.Responses
@using Client_App.Interfaces
@using Client_App.Components.ProductsByCondition
@using Client_App.Components.Share
@inject NavigationManager NavigationManager 

@if (CategoryById is not null)
{
    <Breadcump Name="@CategoryById!.CategoryName" Endpoint="@($"/products/{CategoryById.Endpoint}")"/>
    <Introduce CategoryById="CategoryById"/>
}
else
{
    <Loading/>
}

@if (CategoriesPagination is not null)
{
    <ListCategories Categories="CategoriesPagination"/>
}
else
{
    <Loading/>
}

@if (ProductsPagination is not null)
{
    <ListProducts ProductsPagination="ProductsPagination" Limit="Limit"/>
}


@code {
    [Parameter] public string? CategoryEndpoint { get; set; } = string.Empty;

    public CategoryById? CategoryById { get; set; }
    public Pagination<ProductsInList>? ProductsPagination { get; set; }
    public Pagination<CategoriesInList>? CategoriesPagination { get; set; }

    private int Limit { get; } = 10;
    private int Offset { get; set; }

    [Inject] IProductService<ProductsInList, ProductById> ProductService { get; set; } = null!;
    [Inject] ICategoryService<CategoriesInList, CategoryById> CategoryService { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(CategoryEndpoint))
        {
            NavigationManager.NavigateTo("/products/all", true); // Force reload
            return;
        }

        Offset = 0;

        await LoadDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        Offset = 0;
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            CategoriesPagination = await CategoryService.GetAllAsync();

            CategoryById = await CategoryService.GetByEndpointAsync(CategoryEndpoint!);

            await FetchProductAsync(default);

            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task FetchProductAsync(int offset)
    {
        Offset = offset;
        var products = CategoryEndpoint switch
        {
            "all" => await ProductService.GetProductsByConditionAsync(Offset * Limit, null, false, Limit),
            "best-sellers" => await ProductService.GetProductsByConditionAsync(Offset * Limit, null, true, Limit),
            _ => await ProductService.GetProductsByConditionAsync(Offset * Limit, CategoryById!.CategoryId, false, Limit)
        };
        ProductsPagination = products;
    }

}