@page "/products/{CategoryEndpoint?}"

@using Client_App.Domains.Categories.Responses
@using Client_App.Domains.Products.Responses
@using Client_App.Interfaces
@using Client_App.Components.ProductsByCondition
@using Client_App.Components.Share
@inject NavigationManager NavigationManager 

<Breadcump Name="@Category.CategoryName" Endpoint="@($"/products/{Category.Endpoint}")"/>

<Introduce Category="Category"/>

<ListCategories Categories="Categories"/>

<ListProducts Products="Products" LoadMoreProductAsync="LoadMoreProductAsync"/>


@code {
    [Parameter] public string? CategoryEndpoint { get; set; } = string.Empty;

    public Category Category { get; set; } = null!;
    public List<ProductModel> Products { get; set; } = [];
    public List<Category> Categories = [];

    private int Limit { get; set; } = 10;
    private int Offset { get; set; }

    [Inject] IProductService<ProductModel> ProductService { get; set; } = null!;
    [Inject] ICategoryService<Category> CategoryService { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(CategoryEndpoint))
        {
            NavigationManager.NavigateTo("/products/all", true); // Force reload
            return;
        }

        Products = [];
        Offset = 0;

        await LoadDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        Products = [];
        Offset = 0;
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            Categories = await CategoryService.GetAllAsync();

            Category = Categories.FirstOrDefault(c => c.Endpoint == CategoryEndpoint)!;

            await FetchProductAsync();

            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task FetchProductAsync()
    {
        var products = CategoryEndpoint switch
        {
            "all" => await ProductService.GetProductsByConditionAsync(Offset * Limit, null, false, Limit),
            "best-sellers" => await ProductService.GetProductsByConditionAsync(Offset * Limit, null, true, Limit),
            _ => await ProductService.GetProductsByConditionAsync(Offset * Limit, Category.CategoryId, false, Limit)
        };

        Products.AddRange(products);
    }

    private async Task LoadMoreProductAsync()
    {
        Offset++;
        await FetchProductAsync();
        StateHasChanged();
    }


}