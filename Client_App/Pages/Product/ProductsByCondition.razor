@page "/products/{CategoryEndpoint?}"

@using Client_App.Domains.Categories.Responses
@using Client_App.Domains.Products.Responses
@using Client_App.Interfaces
@using Client_App.Components.ProductsByCondition
@using Client_App.Components.Share
@using Client_App.Domains.Share

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

@if (Category is not null)
{
    <Breadcump Name="@Category.CategoryName" Endpoint="@($"/products/{Category.Endpoint}")"/>
    <Introduce Category="Category"/>
}
else
{
    <Loading/>
}

@if (CategoriesPagination is not null)
{
    <ListCategories Categories="CategoriesPagination"/>
}
else
{
    <Loading/>
}

@if (ProductsPagination is not null)
{
    <div id="list-products">
        <ListProducts ProductsPagination="ProductsPagination"/>
    </div>
}

<div class="flex w-full justify-center my-10">
    <div class="w-full max-w-[1300px] flex justify-center">
        <Pagination TotalPages="TotalPages" CurrentPage="CurrentPage" OnPageClick="OnPageChangeAsync"/>
    </div>
</div>

@code {
    [Parameter] public string? CategoryEndpoint { get; set; } = string.Empty;

    private Category? Category { get; set; }
    public Pagination<ProductsInList>? ProductsPagination { get; set; }
    public Pagination<Category>? CategoriesPagination { get; set; }

    private static int Limit => 8;
    private int Offset { get; set; }
    private int CurrentPage { get; set; } = 1;
    private int TotalPages { get; set; }


    [Inject] public required IProductService ProductService { get; set; }
    [Inject] public required ICategoryService CategoryService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(CategoryEndpoint))
        {
            NavigationManager.NavigateTo("/products/all", true); // Force reload
            return;
        }

        await LoadDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        Offset = 0;
        CurrentPage = 1;
        await LoadDataAsync();
        TotalPages = (int)Math.Ceiling((double)ProductsPagination!.TotalItems / Limit);
    }

    private async Task LoadDataAsync()
    {
        try
        {
            CategoriesPagination = await CategoryService.GetAllAsync<Category>();

            Category = await CategoryService.GetByEndpointAsync<Category>(CategoryEndpoint!);

            await FetchProductAsync(CurrentPage - 1);

            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task FetchProductAsync(int offset)
    {
        Offset = offset;

        ProductsPagination = CategoryEndpoint switch
        {
            "all" => await ProductService.GetProductsByConditionAsync<ProductsInList>(Offset * Limit, default, false, Limit),
            "best-sellers" => await ProductService.GetProductsByConditionAsync<ProductsInList>(Offset * Limit, default, true, Limit),
            _ => await ProductService.GetProductsByConditionAsync<ProductsInList>(Offset * Limit, Category!.CategoryId, false, Limit)
        };
    }

    private async Task OnPageChangeAsync(int newPage)
    {
        CurrentPage = newPage;
        await FetchProductAsync(CurrentPage - 1); // Update the offset based on page
        await JsRuntime.InvokeVoidAsync("scrollToTop"); // Scroll to the top of the product list
    }

}